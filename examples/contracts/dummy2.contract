

contract AccurateDistance(abs_dist_err=0.5):
    globals:
        objects
        workspace

    outputs:
        dist: float

    definitions:
        lead_car = getLeadCar(objects, self)
        lead_dist = distance from self to lead_car

    assumptions:
        always workspace.weather != "FOG"

    guarantees:
        always lead_dist-abs_dist_err <= dist <= lead_dist+abs_dist_err

contract SafeControls(min_dist):
    globals:
        objects

    inputs:
        dist: float

    outputs:
        action: RegulatedControlAction

    definitions:
        lead_car = getLeadCar(objects, self)
        lead_dist = distance from self to lead_car
        full_braking = action.throttle == 0 and action.brake == 1

    assumptions:
        always lead_dist-abs_dist_err <= dist <= lead_dist+abs_dist_err

    guarantees:
        always (lead_dist < min_dist) implies full_braking


contract MinBrakingEffect(min_dist, min_slowdown):
    globals:
        workspace

    definitions:
        full_braking = action.throttle == 0 and action.brake == 1
        vehicle_slowed = self.speed - (next self.speed) > min_slowdown
        vehicle_stopped = self.speed == 0

    inputs:
        action: RegulatedControlAction

    assumptions:
        always workspace.weather != "SNOW"

    guarantees:
        always full_braking implies vehicle_slowed or vehicle_stopped

contract SafeAutoBrake():
    globals:
        objects
        workspace

    definitions:
        lead_car = getLeadCar(objects, self)
        lead_dist = distance from self to lead_car
        vehicle_slowed = self.speed - (next self.speed) > min_slowdown
        vehicle_stopped = self.speed == 0

    assumptions:
        always workspace.weather not in ("FOG", "SNOW", "RAIN")

    guarantees:
        always (lead_dist < min_dist implies
            vehicle_slowed or vehicle_stopped)


