# Generated from WBT.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,16,165,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,
        2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,5,10,87,
        8,10,10,10,12,10,90,9,10,1,10,4,10,93,8,10,11,10,12,10,94,1,10,1,
        10,1,11,4,11,100,8,11,11,11,12,11,101,1,11,1,11,1,12,1,12,1,12,5,
        12,109,8,12,10,12,12,12,112,9,12,1,13,1,13,1,14,3,14,117,8,14,1,
        14,4,14,120,8,14,11,14,12,14,121,1,14,1,14,4,14,126,8,14,11,14,12,
        14,127,3,14,130,8,14,1,14,1,14,3,14,134,8,14,1,14,4,14,137,8,14,
        11,14,12,14,138,3,14,141,8,14,1,15,1,15,1,16,1,16,5,16,147,8,16,
        10,16,12,16,150,9,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,3,17,159,
        8,17,1,18,3,18,162,8,18,1,18,1,18,1,88,0,19,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,0,29,14,31,0,33,15,
        35,0,37,16,1,0,4,2,0,9,9,32,32,3,0,65,90,95,95,97,122,1,0,48,57,
        2,0,34,34,92,92,177,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,29,1,0,
        0,0,0,33,1,0,0,0,0,37,1,0,0,0,1,39,1,0,0,0,3,51,1,0,0,0,5,55,1,0,
        0,0,7,58,1,0,0,0,9,60,1,0,0,0,11,67,1,0,0,0,13,69,1,0,0,0,15,71,
        1,0,0,0,17,73,1,0,0,0,19,78,1,0,0,0,21,84,1,0,0,0,23,99,1,0,0,0,
        25,105,1,0,0,0,27,113,1,0,0,0,29,116,1,0,0,0,31,142,1,0,0,0,33,144,
        1,0,0,0,35,158,1,0,0,0,37,161,1,0,0,0,39,40,5,69,0,0,40,41,5,88,
        0,0,41,42,5,84,0,0,42,43,5,69,0,0,43,44,5,82,0,0,44,45,5,78,0,0,
        45,46,5,80,0,0,46,47,5,82,0,0,47,48,5,79,0,0,48,49,5,84,0,0,49,50,
        5,79,0,0,50,2,1,0,0,0,51,52,5,68,0,0,52,53,5,69,0,0,53,54,5,70,0,
        0,54,4,1,0,0,0,55,56,5,32,0,0,56,57,5,123,0,0,57,6,1,0,0,0,58,59,
        5,125,0,0,59,8,1,0,0,0,60,61,5,104,0,0,61,62,5,105,0,0,62,63,5,100,
        0,0,63,64,5,100,0,0,64,65,5,101,0,0,65,66,5,110,0,0,66,10,1,0,0,
        0,67,68,5,91,0,0,68,12,1,0,0,0,69,70,5,93,0,0,70,14,1,0,0,0,71,72,
        5,44,0,0,72,16,1,0,0,0,73,74,5,84,0,0,74,75,5,82,0,0,75,76,5,85,
        0,0,76,77,5,69,0,0,77,18,1,0,0,0,78,79,5,70,0,0,79,80,5,65,0,0,80,
        81,5,76,0,0,81,82,5,83,0,0,82,83,5,69,0,0,83,20,1,0,0,0,84,88,5,
        35,0,0,85,87,9,0,0,0,86,85,1,0,0,0,87,90,1,0,0,0,88,89,1,0,0,0,88,
        86,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,91,93,3,37,18,0,92,91,1,0,
        0,0,93,94,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,96,1,0,0,0,96,97,
        6,10,0,0,97,22,1,0,0,0,98,100,7,0,0,0,99,98,1,0,0,0,100,101,1,0,
        0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,103,1,0,0,0,103,104,6,11,
        0,0,104,24,1,0,0,0,105,110,3,27,13,0,106,109,3,27,13,0,107,109,3,
        31,15,0,108,106,1,0,0,0,108,107,1,0,0,0,109,112,1,0,0,0,110,108,
        1,0,0,0,110,111,1,0,0,0,111,26,1,0,0,0,112,110,1,0,0,0,113,114,7,
        1,0,0,114,28,1,0,0,0,115,117,5,45,0,0,116,115,1,0,0,0,116,117,1,
        0,0,0,117,119,1,0,0,0,118,120,3,31,15,0,119,118,1,0,0,0,120,121,
        1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,129,1,0,0,0,123,125,
        5,46,0,0,124,126,3,31,15,0,125,124,1,0,0,0,126,127,1,0,0,0,127,125,
        1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,123,1,0,0,0,129,130,
        1,0,0,0,130,140,1,0,0,0,131,133,5,101,0,0,132,134,5,45,0,0,133,132,
        1,0,0,0,133,134,1,0,0,0,134,136,1,0,0,0,135,137,3,31,15,0,136,135,
        1,0,0,0,137,138,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,
        1,0,0,0,140,131,1,0,0,0,140,141,1,0,0,0,141,30,1,0,0,0,142,143,7,
        2,0,0,143,32,1,0,0,0,144,148,5,34,0,0,145,147,3,35,17,0,146,145,
        1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,151,
        1,0,0,0,150,148,1,0,0,0,151,152,5,34,0,0,152,34,1,0,0,0,153,159,
        8,3,0,0,154,155,5,92,0,0,155,159,5,34,0,0,156,157,5,92,0,0,157,159,
        5,92,0,0,158,153,1,0,0,0,158,154,1,0,0,0,158,156,1,0,0,0,159,36,
        1,0,0,0,160,162,5,13,0,0,161,160,1,0,0,0,161,162,1,0,0,0,162,163,
        1,0,0,0,163,164,5,10,0,0,164,38,1,0,0,0,16,0,88,94,101,108,110,116,
        121,127,129,133,138,140,148,158,161,1,6,0,0
    ]

class WBTLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    Comment = 11
    Whitespace = 12
    Identifier = 13
    Number = 14
    String = 15
    Newline = 16

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'EXTERNPROTO'", "'DEF'", "' {'", "'}'", "'hidden'", "'['", 
            "']'", "','", "'TRUE'", "'FALSE'" ]

    symbolicNames = [ "<INVALID>",
            "Comment", "Whitespace", "Identifier", "Number", "String", "Newline" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "Comment", "Whitespace", "Identifier", 
                  "Letter", "Number", "Digit", "String", "Character", "Newline" ]

    grammarFileName = "WBT.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


