# Generated from WBT.g4 by ANTLR 4.11.1
from io import StringIO
import sys

from antlr4 import *

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,148,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,
        1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,
        1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,5,9,
        73,8,9,10,9,12,9,76,9,9,1,9,1,9,1,9,1,9,1,10,4,10,83,8,10,11,10,
        12,10,84,1,10,1,10,1,11,1,11,1,11,5,11,92,8,11,10,11,12,11,95,9,
        11,1,12,1,12,1,13,3,13,100,8,13,1,13,4,13,103,8,13,11,13,12,13,104,
        1,13,1,13,4,13,109,8,13,11,13,12,13,110,3,13,113,8,13,1,13,1,13,
        3,13,117,8,13,1,13,4,13,120,8,13,11,13,12,13,121,3,13,124,8,13,1,
        14,1,14,1,15,1,15,5,15,130,8,15,10,15,12,15,133,9,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,16,3,16,142,8,16,1,17,3,17,145,8,17,1,17,1,17,
        1,74,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,0,27,13,29,0,31,14,33,0,35,15,1,0,4,2,0,9,9,32,32,3,0,65,90,
        95,95,97,122,1,0,48,57,2,0,34,34,92,92,159,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,27,1,0,0,0,0,31,1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,3,41,1,0,0,0,
        5,44,1,0,0,0,7,46,1,0,0,0,9,53,1,0,0,0,11,55,1,0,0,0,13,57,1,0,0,
        0,15,59,1,0,0,0,17,64,1,0,0,0,19,70,1,0,0,0,21,82,1,0,0,0,23,88,
        1,0,0,0,25,96,1,0,0,0,27,99,1,0,0,0,29,125,1,0,0,0,31,127,1,0,0,
        0,33,141,1,0,0,0,35,144,1,0,0,0,37,38,5,68,0,0,38,39,5,69,0,0,39,
        40,5,70,0,0,40,2,1,0,0,0,41,42,5,32,0,0,42,43,5,123,0,0,43,4,1,0,
        0,0,44,45,5,125,0,0,45,6,1,0,0,0,46,47,5,104,0,0,47,48,5,105,0,0,
        48,49,5,100,0,0,49,50,5,100,0,0,50,51,5,101,0,0,51,52,5,110,0,0,
        52,8,1,0,0,0,53,54,5,91,0,0,54,10,1,0,0,0,55,56,5,93,0,0,56,12,1,
        0,0,0,57,58,5,44,0,0,58,14,1,0,0,0,59,60,5,84,0,0,60,61,5,82,0,0,
        61,62,5,85,0,0,62,63,5,69,0,0,63,16,1,0,0,0,64,65,5,70,0,0,65,66,
        5,65,0,0,66,67,5,76,0,0,67,68,5,83,0,0,68,69,5,69,0,0,69,18,1,0,
        0,0,70,74,5,35,0,0,71,73,9,0,0,0,72,71,1,0,0,0,73,76,1,0,0,0,74,
        75,1,0,0,0,74,72,1,0,0,0,75,77,1,0,0,0,76,74,1,0,0,0,77,78,3,35,
        17,0,78,79,1,0,0,0,79,80,6,9,0,0,80,20,1,0,0,0,81,83,7,0,0,0,82,
        81,1,0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,
        0,86,87,6,10,0,0,87,22,1,0,0,0,88,93,3,25,12,0,89,92,3,25,12,0,90,
        92,3,29,14,0,91,89,1,0,0,0,91,90,1,0,0,0,92,95,1,0,0,0,93,91,1,0,
        0,0,93,94,1,0,0,0,94,24,1,0,0,0,95,93,1,0,0,0,96,97,7,1,0,0,97,26,
        1,0,0,0,98,100,5,45,0,0,99,98,1,0,0,0,99,100,1,0,0,0,100,102,1,0,
        0,0,101,103,3,29,14,0,102,101,1,0,0,0,103,104,1,0,0,0,104,102,1,
        0,0,0,104,105,1,0,0,0,105,112,1,0,0,0,106,108,5,46,0,0,107,109,3,
        29,14,0,108,107,1,0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,110,111,
        1,0,0,0,111,113,1,0,0,0,112,106,1,0,0,0,112,113,1,0,0,0,113,123,
        1,0,0,0,114,116,5,101,0,0,115,117,5,45,0,0,116,115,1,0,0,0,116,117,
        1,0,0,0,117,119,1,0,0,0,118,120,3,29,14,0,119,118,1,0,0,0,120,121,
        1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,124,1,0,0,0,123,114,
        1,0,0,0,123,124,1,0,0,0,124,28,1,0,0,0,125,126,7,2,0,0,126,30,1,
        0,0,0,127,131,5,34,0,0,128,130,3,33,16,0,129,128,1,0,0,0,130,133,
        1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,134,1,0,0,0,133,131,
        1,0,0,0,134,135,5,34,0,0,135,32,1,0,0,0,136,142,8,3,0,0,137,138,
        5,92,0,0,138,142,5,34,0,0,139,140,5,92,0,0,140,142,5,92,0,0,141,
        136,1,0,0,0,141,137,1,0,0,0,141,139,1,0,0,0,142,34,1,0,0,0,143,145,
        5,13,0,0,144,143,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,0,146,147,
        5,10,0,0,147,36,1,0,0,0,15,0,74,84,91,93,99,104,110,112,116,121,
        123,131,141,144,1,6,0,0
    ]

class WBTLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    Comment = 10
    Whitespace = 11
    Identifier = 12
    Number = 13
    String = 14
    Newline = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'DEF'", "' {'", "'}'", "'hidden'", "'['", "']'", "','", "'TRUE'", 
            "'FALSE'" ]

    symbolicNames = [ "<INVALID>",
            "Comment", "Whitespace", "Identifier", "Number", "String", "Newline" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "Comment", "Whitespace", "Identifier", 
                  "Letter", "Number", "Digit", "String", "Character", "Newline" ]

    grammarFileName = "WBT.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


